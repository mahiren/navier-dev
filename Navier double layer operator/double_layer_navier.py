# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_double_layer_navier', [dirname(__file__)])
        except ImportError:
            import _double_layer_navier
            return _double_layer_navier
        if fp is not None:
            try:
                _mod = imp.load_module('_double_layer_navier', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _double_layer_navier = swig_import_helper()
    del swig_import_helper
else:
    import _double_layer_navier
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import core

def createNavier3dDoubleLayerBoundaryOperator(*args):
  """
    createNavier3dDoubleLayerBoundaryOperator(context, domain, range, dualToRange, waveNumber_p, waveNumber_s, label="") -> BoundaryOperator_float64_complex128

    Parameters:
        context: boost::shared_ptr< Bempp::Context< double,Bempp::ScalarTraits< double >::ComplexType > const > const &
        domain: boost::shared_ptr< Bempp::Space< double > const > const &
        range: boost::shared_ptr< Bempp::Space< double > const > const &
        dualToRange: boost::shared_ptr< Bempp::Space< double > const > const &
        waveNumber_p: Bempp::ScalarTraits< double >::ComplexType
        waveNumber_s: Bempp::ScalarTraits< double >::ComplexType
        label: std::string const &

    """
  return _double_layer_navier.createNavier3dDoubleLayerBoundaryOperator(*args)


